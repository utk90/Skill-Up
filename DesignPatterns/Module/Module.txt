>> As your application and codebase grow, it becomes increasingly important to keep your code maintainable and separated. The module pattern allows you to split up your code into smaller, reusable pieces.

>> Besides being able to split the code into smaller reusabable pieces, modules allow you to keep certain values within your file private.

>> Declarations within a module are scoped (encapsulated) to that module, by default. If we don't explicitly exporta a certain value, that value is not available outside thet module./
This reduces the risk of name collisions for values declared in other parts of your codebase, since the values are not available on the global scope.

>> Avoids polluting global scope

>> Revealing module pattern is an improvement made to the module pattern where we write the entire object logic in the private scope of the module and the public parts are exposed by returning an anonymouse objects

>> Alias can be used to import, export members from a module.

>> Dynamic import 
When importing all modules on the top of a file, all modules get loaded before the rest of the file. In some cases, we only need to
import a module based on a certain condition. With a dynamic import, we can import modules on demand.

--> by dynamically importing modules, we can reduce the page load time. We only have to load, parse and compile the code that the user really needs, when the user needs it.

--> besides being able to import modules on-demand, the import() function can receive an expression. It allows us to pass template literals, in order to dynamically load modules based on a given value.
